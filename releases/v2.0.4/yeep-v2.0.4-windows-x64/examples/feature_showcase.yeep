// ===============================================================
// Yeep v2.0.4 Complete Feature Showcase
// Demonstrates all language features and new v2.0.4 capabilities
// ===============================================================
//
// This comprehensive showcase demonstrates:
// - File I/O operations (NEW in v2.0.4)
// - System integration functions (NEW in v2.0.4)
// - Enhanced REPL commands (NEW in v2.0.4)
// - Control flow structures (for loops, while loops, conditionals)
// - User-defined functions with parameters and return values
// - Variable types (numbers, strings, arrays, booleans)
// - Built-in mathematical and string functions
// - Advanced programming patterns
//
// ===============================================================

// Print the showcase header
print "🚀 Yeep v2.0.4 Complete Feature Showcase";
print "==========================================";
print "";

// ===============================================================
// 1. FILE I/O OPERATIONS (NEW IN v2.0.4)
// ===============================================================
print "1. 📁 File I/O Operations (NEW!)";
print "--------------------------------";

// Write configuration data to file
print "Creating configuration file...";
writeFile("config.yeep", "# Yeep v2.0.4 Configuration\nversion=2.0.4\nauthor=Yeep Team\nfeatures=file_io,system_integration,enhanced_repl");
print "✅ Configuration file created";

// Read and display file contents
print "📄 Reading configuration file:";
print readFile("config.yeep");

// Demonstrate file existence checking
if (fileExists("config.yeep")) {
    print "✅ File existence check: PASSED";
} else {
    print "❌ File existence check: FAILED";
}
print "";

// ===============================================================
// 2. SYSTEM INTEGRATION (NEW IN v2.0.4)
// ===============================================================
print "2. 🔧 System Integration (NEW!)";
print "-------------------------------";

// Environment variables
print "Getting system information...";
print "👤 Current user: " + env("USERNAME");
print "🏠 User profile: " + env("USERPROFILE");
print "💻 Computer name: " + env("COMPUTERNAME");

// System timestamp
print "⏰ Current timestamp: " + str(now());

// Execute system commands
print "📝 Creating system log entry...";
exec("echo 'Yeep v2.0.4 Feature Showcase - " + str(now()) + "' >> yeep_system.log");
print "✅ System log entry created";
print "";

// ===============================================================
// 3. CONTROL FLOW STRUCTURES
// ===============================================================
print "3. 🔄 Control Flow Structures";
print "-----------------------------";

// For loops
print "📊 For loop demonstration:";
for (let i = 1; i <= 5; i = i + 1) {
    print "  For loop iteration " + str(i) + ": " + str(i * i);
}

// While loops
print "🔁 While loop demonstration:";
let counter = 1;
while (counter <= 3) {
    print "  While loop iteration " + str(counter) + ": " + str(counter * 2);
    counter = counter + 1;
}

// Nested loops
print "🔄 Nested loop demonstration (multiplication table):";
for (let x = 1; x <= 3; x = x + 1) {
    for (let y = 1; y <= 3; y = y + 1) {
        print "  " + str(x) + " × " + str(y) + " = " + str(x * y);
    }
}
print "";

// ===============================================================
// 4. USER-DEFINED FUNCTIONS
// ===============================================================
print "4. 📝 User-Defined Functions";
print "----------------------------";

// Simple greeting function
fun greet(name) {
    return "Hello, " + name + "! Welcome to Yeep v2.0.4! 🎉";
}

// Mathematical function
fun calculateArea(width, height) {
    return width * height;
}

// Recursive function
fun factorial(n) {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n - 1);
}

// Function with conditional logic
fun grade(score) {
    if (score >= 90) {
        return "A - Excellent!";
    } else if (score >= 80) {
        return "B - Good!";
    } else if (score >= 70) {
        return "C - Fair";
    } else {
        return "D - Needs improvement";
    }
}

// Test all functions
print greet("Developer");
print "Area of 5×3 rectangle: " + str(calculateArea(5, 3));
print "Factorial of 5: " + str(factorial(5));
print "Grade for 85%: " + grade(85);
print "Grade for 95%: " + grade(95);
print "";

// ===============================================================
// 5. VARIABLE TYPES AND OPERATIONS
// ===============================================================
print "5. 📊 Variable Types and Operations";
print "----------------------------------";

// Numbers
let integer_num = 42;
let float_num = 3.14159;
print "Integer: " + str(integer_num);
print "Float: " + str(float_num);
print "Math operation: " + str(integer_num) + " + " + str(float_num) + " = " + str(integer_num + float_num);

// Strings
let greeting = "Hello";
let target = "World";
print "String concatenation: " + greeting + " " + target + "!";

// Arrays
let numbers = [1, 2, 3, 4, 5];
let mixed_array = ["text", 42, 3.14, true];
print "Number array: " + str(numbers);
print "Mixed array: " + str(mixed_array);

// Booleans
let is_awesome = true;
let is_boring = false;
print "Boolean values: " + str(is_awesome) + " and " + str(is_boring);
print "";

// ===============================================================
// 6. BUILT-IN FUNCTIONS
// ===============================================================
print "6. 🧮 Built-in Functions";
print "------------------------";

// Math functions
print "Math functions:";
print "  sqrt(16) = " + str(sqrt(16));
print "  pow(2, 3) = " + str(pow(2, 3));
print "  abs(-5) = " + str(abs(-5));
print "  max(10, 5, 15) = " + str(max(10, 5, 15));
print "  min(10, 5, 15) = " + str(min(10, 5, 15));

// String functions
print "String functions:";
print "  length('Hello') = " + str(length("Hello"));
print "  uppercase('hello') = " + uppercase("hello");
print "  lowercase('WORLD') = " + lowercase("WORLD");
print "  substring('Hello', 1, 3) = " + substring("Hello", 1, 3);
print "";

// ===============================================================
// 7. ADVANCED PROGRAMMING PATTERNS
// ===============================================================
print "7. 🎯 Advanced Programming Patterns";
print "----------------------------------";

// Function that returns a function-like behavior
fun createMultiplier(factor) {
    return factor;
}

// Using functions in loops
print "Using functions in loops:";
for (let i = 1; i <= 5; i = i + 1) {
    let multiplier = createMultiplier(i);
    print "  " + str(i) + " squared = " + str(i * multiplier);
}

// Conditional function calls
print "Conditional function calls:";
for (let score = 70; score <= 100; score = score + 10) {
    print "  Score " + str(score) + ": " + grade(score);
}
print "";

// ===============================================================
// 8. SESSION SUMMARY AND REPL COMMANDS
// ===============================================================
print "8. 📋 Session Summary and REPL Commands (NEW!)";
print "----------------------------------------------";

// Create comprehensive session summary
let summary = "=== Yeep v2.0.4 Feature Showcase Summary ===\n";
summary = summary + "Date: " + str(now()) + "\n";
summary = summary + "User: " + env("USERNAME") + "\n";
summary = summary + "Computer: " + env("COMPUTERNAME") + "\n\n";
summary = summary + "Features Demonstrated:\n";
summary = summary + "✅ File I/O Operations (writeFile, readFile, fileExists)\n";
summary = summary + "✅ System Integration (env, now, exec)\n";
summary = summary + "✅ Control Flow (for loops, while loops, conditionals)\n";
summary = summary + "✅ User-Defined Functions (with parameters, recursion)\n";
summary = summary + "✅ Variable Types (numbers, strings, arrays, booleans)\n";
summary = summary + "✅ Built-in Functions (math, string operations)\n";
summary = summary + "✅ Advanced Programming Patterns\n";
summary = summary + "✅ Enhanced REPL Commands\n\n";
summary = summary + "New REPL Commands in v2.0.4:\n";
summary = summary + "- 'vars' - Show all variables\n";
summary = summary + "- 'funcs' - Show all functions\n";
summary = summary + "- 'features' - Show new features\n\n";
summary = summary + "All features working perfectly! 🎉\n";

// Save the summary
writeFile("yeep_v2.0.4_showcase_summary.txt", summary);
print "💾 Complete session summary saved to: yeep_v2.0.4_showcase_summary.txt";
print "";

// ===============================================================
// SHOWCASE COMPLETE
// ===============================================================
print "🎊 YEEP v2.0.4 FEATURE SHOWCASE COMPLETE! 🎊";
print "============================================";
print "";
print "🚀 Ready for production use!";
print "📚 Try these REPL commands:";
print "   • vars     - Show all variables";
print "   • funcs    - Show all functions";  
print "   • features - Show new v2.0.4 features";
print "   • help     - Show all REPL commands";
print "";
print "🎯 Yeep v2.0.4 is now feature-complete and production-ready!";
