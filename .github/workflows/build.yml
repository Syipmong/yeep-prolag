name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: linux-x64
            binary: yeep
          - os: windows-latest
            target: windows-x64
            binary: yeep.exe
          - os: macos-latest
            target: macos-x64
            binary: yeep

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up build environment (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make

    - name: Set up build environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Xcode command line tools should be pre-installed

    - name: Set up build environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: gcc make

    - name: Build (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        make clean
        make

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        make clean
        make

    - name: Test build
      run: |
        # Test basic functionality
        echo 'print("Hello from CI!");' | ./build/${{ matrix.binary }}

    - name: Package release (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release
        cp build/${{ matrix.binary }} release/
        cp install.sh release/
        cp README.md release/
        cp LICENSE release/
        cp -r examples release/
        tar -czf yeep-${{ matrix.target }}.tar.gz -C release .

    - name: Package release (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        mkdir -p release
        cp build/${{ matrix.binary }} release/
        cp install.bat release/
        cp README.md release/
        cp LICENSE release/
        cp -r examples release/
        
    - name: Create ZIP (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Compress-Archive -Path release\* -DestinationPath yeep-${{ matrix.target }}.zip

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: yeep-${{ matrix.target }}
        path: |
          yeep-${{ matrix.target }}.tar.gz
          yeep-${{ matrix.target }}.zip
        if-no-files-found: ignore

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          yeep-*/yeep-*.tar.gz
          yeep-*/yeep-*.zip
        body: |
          ## Yeep Programming Language ${{ github.ref_name }}
          
          ### Downloads
          - **Windows**: Download `yeep-windows-x64.zip`
          - **Linux**: Download `yeep-linux-x64.tar.gz`
          - **macOS**: Download `yeep-macos-x64.tar.gz`
          
          ### Installation
          1. Download the appropriate archive for your platform
          2. Extract the archive
          3. Run the installer:
             - Windows: Run `install.bat` as administrator
             - Linux/macOS: Run `chmod +x install.sh && ./install.sh`
          
          ### What's New
          - Logical operators `&&` and `||` with short-circuit evaluation
          - Enhanced string concatenation with all data types
          - Improved error handling and user experience
          - Professional CLI with `--help` and `--version` options
          - Shebang support for executable scripts
          
          For detailed documentation, see the [README](https://github.com/syipmong/yeep-prolag/blob/main/README.md).
        draft: false
        prerelease: false
