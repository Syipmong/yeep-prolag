name: Build and Release Yeep

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: mingw-w64-x86_64-gcc mingw-w64-x86_64-make
    
    - name: Build Yeep v2.0.1
      shell: msys2 {0}
      run: |
        echo "Building Yeep Programming Language v2.0.1"
        g++ --version
        
        # Create build directory
        mkdir -p build
        
        # Compile all source files
        g++ -std=c++17 -Wall -Wextra -O2 \
          -Iinclude \
          src/Token.cpp \
          src/Lexer.cpp \
          src/BuiltinFunctions.cpp \
          src/Interpreter.cpp \
          src/main.cpp \
          -o build/yeep.exe
        
        echo "Build completed successfully!"
        ls -la build/
    
    - name: Test Yeep Executable
      shell: msys2 {0}
      run: |
        echo "Testing Yeep executable..."
        # Test with simple program
        echo 'print "Hello from GitHub Actions!";' > test_github.yeep
        ./build/yeep.exe test_github.yeep
        
        # Test with existing test files if they exist
        if [ -f "test_simple.yeep" ]; then
          echo "Running test_simple.yeep..."
          ./build/yeep.exe test_simple.yeep
        fi
    
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: yeep-windows-x64
        path: build/yeep.exe

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++
    
    - name: Build Yeep v2.0.1
      run: |
        echo "Building Yeep Programming Language v2.0.1 for Linux"
        g++ --version
        
        # Create build directory
        mkdir -p build
        
        # Compile all source files
        g++ -std=c++17 -Wall -Wextra -O2 \
          -Iinclude \
          src/Token.cpp \
          src/Lexer.cpp \
          src/BuiltinFunctions.cpp \
          src/Interpreter.cpp \
          src/main.cpp \
          -o build/yeep
        
        echo "Build completed successfully!"
        ls -la build/
    
    - name: Test Yeep Executable
      run: |
        echo "Testing Yeep executable..."
        # Test with simple program
        echo 'print "Hello from GitHub Actions Linux!";' > test_github.yeep
        ./build/yeep test_github.yeep
        
        # Test with existing test files if they exist
        if [ -f "test_simple.yeep" ]; then
          echo "Running test_simple.yeep..."
          ./build/yeep test_simple.yeep
        fi
    
    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: yeep-linux-x64
        path: build/yeep

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Dependencies
      run: |
        # Xcode command line tools should be available
        clang++ --version
    
    - name: Build Yeep v2.0.1
      run: |
        echo "Building Yeep Programming Language v2.0.1 for macOS"
        clang++ --version
        
        # Create build directory
        mkdir -p build
        
        # Compile all source files
        clang++ -std=c++17 -Wall -Wextra -O2 \
          -Iinclude \
          src/Token.cpp \
          src/Lexer.cpp \
          src/BuiltinFunctions.cpp \
          src/Interpreter.cpp \
          src/main.cpp \
          -o build/yeep
        
        echo "Build completed successfully!"
        ls -la build/
    
    - name: Test Yeep Executable
      run: |
        echo "Testing Yeep executable..."
        # Test with simple program
        echo 'print "Hello from GitHub Actions macOS!";' > test_github.yeep
        ./build/yeep test_github.yeep
        
        # Test with existing test files if they exist
        if [ -f "test_simple.yeep" ]; then
          echo "Running test_simple.yeep..."
          ./build/yeep test_simple.yeep
        fi
    
    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: yeep-macos-x64
        path: build/yeep

  release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Prepare Release Assets
      run: |
        echo "Preparing release assets..."
        ls -la artifacts/
        
        # Create release directory
        mkdir -p release
        
        # Package Windows release
        mkdir -p release/yeep-${{ github.ref_name }}-windows
        cp artifacts/yeep-windows-x64/yeep.exe release/yeep-${{ github.ref_name }}-windows/
        cp README.md release/yeep-${{ github.ref_name }}-windows/ || echo "README.md not found"
        cp LICENSE release/yeep-${{ github.ref_name }}-windows/ || echo "LICENSE not found"
        cp VERSION release/yeep-${{ github.ref_name }}-windows/ || echo "VERSION not found"
        if [ -f "RELEASE-v2.0.1.md" ]; then
          cp RELEASE-v2.0.1.md release/yeep-${{ github.ref_name }}-windows/RELEASE-NOTES.md
        fi
        
        # Copy example files if they exist
        mkdir -p release/yeep-${{ github.ref_name }}-windows/examples
        for file in *.yeep; do
          if [ -f "$file" ]; then
            cp "$file" release/yeep-${{ github.ref_name }}-windows/examples/
          fi
        done
        
        # Create Windows ZIP
        cd release
        zip -r yeep-${{ github.ref_name }}-windows.zip yeep-${{ github.ref_name }}-windows/
        cd ..
        
        # Package Linux release
        mkdir -p release/yeep-${{ github.ref_name }}-linux
        cp artifacts/yeep-linux-x64/yeep release/yeep-${{ github.ref_name }}-linux/
        cp README.md release/yeep-${{ github.ref_name }}-linux/ || echo "README.md not found"
        cp LICENSE release/yeep-${{ github.ref_name }}-linux/ || echo "LICENSE not found"
        cp VERSION release/yeep-${{ github.ref_name }}-linux/ || echo "VERSION not found"
        if [ -f "RELEASE-v2.0.1.md" ]; then
          cp RELEASE-v2.0.1.md release/yeep-${{ github.ref_name }}-linux/RELEASE-NOTES.md
        fi
        
        # Copy example files
        mkdir -p release/yeep-${{ github.ref_name }}-linux/examples
        for file in *.yeep; do
          if [ -f "$file" ]; then
            cp "$file" release/yeep-${{ github.ref_name }}-linux/examples/
          fi
        done
        
        # Create Linux tar.gz
        cd release
        tar -czf yeep-${{ github.ref_name }}-linux.tar.gz yeep-${{ github.ref_name }}-linux/
        cd ..
        
        # Package macOS release
        mkdir -p release/yeep-${{ github.ref_name }}-macos
        cp artifacts/yeep-macos-x64/yeep release/yeep-${{ github.ref_name }}-macos/
        cp README.md release/yeep-${{ github.ref_name }}-macos/ || echo "README.md not found"
        cp LICENSE release/yeep-${{ github.ref_name }}-macos/ || echo "LICENSE not found"
        cp VERSION release/yeep-${{ github.ref_name }}-macos/ || echo "VERSION not found"
        if [ -f "RELEASE-v2.0.1.md" ]; then
          cp RELEASE-v2.0.1.md release/yeep-${{ github.ref_name }}-macos/RELEASE-NOTES.md
        fi
        
        # Copy example files
        mkdir -p release/yeep-${{ github.ref_name }}-macos/examples
        for file in *.yeep; do
          if [ -f "$file" ]; then
            cp "$file" release/yeep-${{ github.ref_name }}-macos/examples/
          fi
        done
        
        # Create macOS tar.gz
        cd release
        tar -czf yeep-${{ github.ref_name }}-macos.tar.gz yeep-${{ github.ref_name }}-macos/
        cd ..
        
        echo "Release assets prepared:"
        ls -la release/
    
    - name: Read Release Notes
      id: release_notes
      run: |
        if [ -f "RELEASE-v2.0.1.md" ]; then
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE-v2.0.1.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "release_notes=Yeep Programming Language ${{ github.ref_name }} Release" >> $GITHUB_OUTPUT
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: "Yeep Programming Language ${{ github.ref_name }}"
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: false
        prerelease: false
        files: |
          release/yeep-${{ github.ref_name }}-windows.zip
          release/yeep-${{ github.ref_name }}-linux.tar.gz
          release/yeep-${{ github.ref_name }}-macos.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
