name: Build and Release Yeep v2.0.0

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release

jobs:
  # Build for Windows
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MinGW
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-libs
          mingw-w64-x86_64-make
          
    - name: Create build directory
      run: |
        mkdir build
        mkdir build\core
        
    - name: Build Yeep (Windows)
      shell: msys2 {0}
      run: |
        echo "Building Yeep Programming Language v2.0.0 for Windows..."
        g++ --version
        
        # Compile core components
        g++ -Wall -Wextra -std=c++17 -I include -c src/main.cpp -o build/main.o
        g++ -Wall -Wextra -std=c++17 -I include -c src/core/YeepEngine.cpp -o build/core/YeepEngine.o
        g++ -Wall -Wextra -std=c++17 -I include -c src/core/Token.cpp -o build/core/Token.o
        g++ -Wall -Wextra -std=c++17 -I include -c src/core/Lexer.cpp -o build/core/Lexer.o
        
        # Link executable
        g++ build/main.o build/core/YeepEngine.o build/core/Token.o build/core/Lexer.o -o build/yeep.exe
        
        echo "Build completed successfully!"
        
    - name: Test Yeep executable
      shell: msys2 {0}
      run: |
        echo 'print("GitHub Actions build test successful!");' > test.yeep
        ./build/yeep.exe test.yeep
        
    - name: Package Windows Release
      run: |
        mkdir yeep-v2.0.0-windows
        copy build\yeep.exe yeep-v2.0.0-windows\
        copy README.md yeep-v2.0.0-windows\
        copy CHANGELOG.md yeep-v2.0.0-windows\
        copy demo_v2.yeep yeep-v2.0.0-windows\
        echo @echo off > yeep-v2.0.0-windows\install.bat
        echo echo Installing Yeep Programming Language v2.0.0... >> yeep-v2.0.0-windows\install.bat
        echo copy yeep.exe "%USERPROFILE%\bin\yeep.exe" >> yeep-v2.0.0-windows\install.bat
        echo echo Yeep installed successfully! >> yeep-v2.0.0-windows\install.bat
        echo echo Run 'yeep' to start the interpreter. >> yeep-v2.0.0-windows\install.bat
        
    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4
      with:
        name: yeep-v2.0.0-windows
        path: yeep-v2.0.0-windows/

  # Build for Linux
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ make
        
    - name: Create build directory
      run: |
        mkdir -p build/core
        
    - name: Build Yeep (Linux)
      run: |
        echo "Building Yeep Programming Language v2.0.0 for Linux..."
        g++ --version
        
        # Compile core components
        g++ -Wall -Wextra -std=c++17 -I include -c src/main.cpp -o build/main.o
        g++ -Wall -Wextra -std=c++17 -I include -c src/core/YeepEngine.cpp -o build/core/YeepEngine.o
        g++ -Wall -Wextra -std=c++17 -I include -c src/core/Token.cpp -o build/core/Token.o
        g++ -Wall -Wextra -std=c++17 -I include -c src/core/Lexer.cpp -o build/core/Lexer.o
        
        # Link executable
        g++ build/main.o build/core/YeepEngine.o build/core/Token.o build/core/Lexer.o -o build/yeep
        chmod +x build/yeep
        
        echo "Build completed successfully!"
        
    - name: Test Yeep executable
      run: |
        echo 'print("GitHub Actions Linux build test successful!");' > test.yeep
        ./build/yeep test.yeep
        
    - name: Package Linux Release
      run: |
        mkdir yeep-v2.0.0-linux
        cp build/yeep yeep-v2.0.0-linux/
        cp README.md yeep-v2.0.0-linux/
        cp CHANGELOG.md yeep-v2.0.0-linux/
        cp demo_v2.yeep yeep-v2.0.0-linux/
        cat > yeep-v2.0.0-linux/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing Yeep Programming Language v2.0.0..."
        sudo cp yeep /usr/local/bin/yeep
        sudo chmod +x /usr/local/bin/yeep
        echo "Yeep installed successfully!"
        echo "Run 'yeep' to start the interpreter."
        EOF
        chmod +x yeep-v2.0.0-linux/install.sh
        
    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: yeep-v2.0.0-linux
        path: yeep-v2.0.0-linux/

  # Build for macOS
  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        brew install gcc
        
    - name: Create build directory
      run: |
        mkdir -p build/core
        
    - name: Build Yeep (macOS)
      run: |
        echo "Building Yeep Programming Language v2.0.0 for macOS..."
        g++ --version
        
        # Compile core components
        g++ -Wall -Wextra -std=c++17 -I include -c src/main.cpp -o build/main.o
        g++ -Wall -Wextra -std=c++17 -I include -c src/core/YeepEngine.cpp -o build/core/YeepEngine.o
        g++ -Wall -Wextra -std=c++17 -I include -c src/core/Token.cpp -o build/core/Token.o
        g++ -Wall -Wextra -std=c++17 -I include -c src/core/Lexer.cpp -o build/core/Lexer.o
        
        # Link executable
        g++ build/main.o build/core/YeepEngine.o build/core/Token.o build/core/Lexer.o -o build/yeep
        chmod +x build/yeep
        
        echo "Build completed successfully!"
        
    - name: Test Yeep executable
      run: |
        echo 'print("GitHub Actions macOS build test successful!");' > test.yeep
        ./build/yeep test.yeep
        
    - name: Package macOS Release
      run: |
        mkdir yeep-v2.0.0-macos
        cp build/yeep yeep-v2.0.0-macos/
        cp README.md yeep-v2.0.0-macos/
        cp CHANGELOG.md yeep-v2.0.0-macos/
        cp demo_v2.yeep yeep-v2.0.0-macos/
        cat > yeep-v2.0.0-macos/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing Yeep Programming Language v2.0.0..."
        sudo cp yeep /usr/local/bin/yeep
        sudo chmod +x /usr/local/bin/yeep
        echo "Yeep installed successfully!"
        echo "Run 'yeep' to start the interpreter."
        EOF
        chmod +x yeep-v2.0.0-macos/install.sh
        
    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4
      with:
        name: yeep-v2.0.0-macos
        path: yeep-v2.0.0-macos/

  # Create Release
  release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create release packages
      run: |
        # Create zip files for each platform
        cd yeep-v2.0.0-windows && zip -r ../yeep-v2.0.0-windows.zip . && cd ..
        cd yeep-v2.0.0-linux && tar -czf ../yeep-v2.0.0-linux.tar.gz . && cd ..
        cd yeep-v2.0.0-macos && tar -czf ../yeep-v2.0.0-macos.tar.gz . && cd ..
        
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "yeep-v2.0.0-windows.zip,yeep-v2.0.0-linux.tar.gz,yeep-v2.0.0-macos.tar.gz"
        body: |
          # Yeep Programming Language v2.0.0 - Official Release
          
          ðŸŽ‰ **Major Release - Complete C++ Migration**
          
          ## What's New
          - Complete rewrite in modern C++17
          - Interactive REPL with help system
          - Script file execution
          - Print statements support
          - Professional build system
          - Cross-platform support (Windows, Linux, macOS)
          
          ## Installation
          
          ### Windows
          1. Download `yeep-v2.0.0-windows.zip`
          2. Extract and run `install.bat`
          3. Use `yeep` command from anywhere
          
          ### Linux/macOS
          1. Download the appropriate `.tar.gz` file
          2. Extract and run `./install.sh`
          3. Use `yeep` command from anywhere
          
          ## Quick Start
          ```bash
          # Interactive mode
          yeep
          
          # Run a script
          yeep script.yeep
          ```
          
          ## Example Usage
          ```yeep
          print("Hello, Yeep v2.0.0!");
          print("Welcome to modern C++ programming!");
          ```
          
          Ready for production use! ðŸš€
        draft: false
        prerelease: false
